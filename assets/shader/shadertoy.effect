CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
}%

CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = vec2(a_uv0.x, 1.0 - a_uv0.y);
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;

  varying vec2 v_texCoord;

  #include <cc-global>

  #define iResolution cc_screenSize

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  vec4 mainImage (in vec2 fragCoord) {
    vec2 uv = fragCoord / cc_screenSize.xy;
    vec3 col = 0.5 + 0.5 * cos(cc_time.x + v_uv0.xyx + vec3(0, 2, 4));
    return vec4(col, 1.0);
  } 

  void main () {

    vec4 color = mainImage(v_uv0 * cc_screenSize.xy);
    gl_FragColor = color;

    // vec3 col;
    // #if USE_TEXTURE
    // col = 0.5 + 0.5 * 8.5 * cos(cc_time.x + v_uv0.xyx + vec3(0, 4, 8));
    // #else
    // col = 0.5 + 0.5 * cos(cc_time.x + vec3(0, 2, 4));
    // #endif
    // vec4 color = vec4(col, 1.0);
    // gl_FragColor = color; 
  }
}%
